user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;


   client_max_body_size 10M;  # Adjust the size as needed (e.g., 10M, 20M, 100M)
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;
    include /etc/nginx/conf.d/*.conf;

    # HTTPS Server for admin.paymentplangh.com
    server {
        listen 443 ssl;
        server_name admin.paymentplangh.com;

        root /megalosFrontend/adminPortal;
        index index.html;

        ssl_certificate /etc/letsencrypt/live/admin.paymentplangh.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/admin.paymentplangh.com/privkey.pem;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout  10m;
        ssl_ciphers PROFILE=SYSTEM;
        ssl_prefer_server_ciphers on;

        location / {
            try_files $uri $uri/ /index.html;
        }

        error_page 404 /404.html;
        location = /40x.html {}

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {}
    }

    # HTTP Redirect to HTTPS for all domains
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name localhost 207.180.245.93 paymentplangh.com admin.paymentplangh.com backend.paymentplangh.com;

        return 301 https://$host$request_uri;
    }

    # Reverse proxy for paymentplangh.com to port 8080
    server {
        listen 443 ssl;
        server_name paymentplangh.com www.paymentplangh.com;

        ssl_certificate /etc/letsencrypt/live/paymentplangh.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/paymentplangh.com/privkey.pem;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_ciphers PROFILE=SYSTEM;
        ssl_prefer_server_ciphers on;

        location / {
            proxy_pass http://localhost:8080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }

    # Reverse proxy to backend running on port 3000
    server {
        listen 443 ssl;
        server_name backend.paymentplangh.com;

        ssl_certificate /etc/letsencrypt/live/backend.paymentplangh.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/backend.paymentplangh.com/privkey.pem;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_ciphers PROFILE=SYSTEM;
        ssl_prefer_server_ciphers on;

        location / {
            proxy_pass http://localhost:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
server {
    listen 80;
    server_name jamjournal.com www.jamjournal.com;

    return 301 https://$host$request_uri;
}

# Frontend: jamjournal.com
server {
    listen 443 ssl;
    server_name jamjournal.com;
    root /jamsounds/jamsounds-frontend/dist;
    index index.html;
    
    ssl_certificate /etc/letsencrypt/live/jamjournal.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/jamjournal.com/privkey.pem;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_ciphers PROFILE=SYSTEM;
    ssl_prefer_server_ciphers on;
    
    # API routes - proxy to backend
    location /api/ {
        proxy_pass http://localhost:4000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
    
    # Uploads route - proxy to backend
    location /uploads/ {
        proxy_pass http://localhost:4000/uploads/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
    
    # Frontend routes - serve static files
    location / {
        try_files $uri /index.html;
    }
    
    error_page 404 /404.html;
    location = /40x.html {}
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {}
}
# Backend: backend.jamjournal.com
server {
    listen 443 ssl;
    server_name backend.jamjournal.com;

    ssl_certificate /etc/letsencrypt/live/backend.jamjournal.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/backend.jamjournal.com/privkey.pem;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_ciphers PROFILE=SYSTEM;
    ssl_prefer_server_ciphers on;

    location /api/ {
        proxy_pass http://localhost:4000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    location /uploads/ {
        proxy_pass http://localhost:4000/uploads/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Optional: fallback root for other routes
    location / {
        proxy_pass http://localhost:4000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}

}
